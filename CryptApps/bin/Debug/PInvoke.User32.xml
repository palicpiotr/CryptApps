<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PInvoke.User32</name>
    </assembly>
    <members>
        <member name="T:PInvoke.User32">
            <content>
            Contains the <see cref="T:PInvoke.User32.MessageBeepType"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.FlashWindowFlags"/> nested type.
            </content>
            <content>Contains the <see cref="T:PInvoke.User32.FLASHWINFO" /> nested type.</content>
            <content>
            Contains the <see cref="T:PInvoke.User32.LookupIconIdFromDirectoryExFlags"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.MapVirtualKeyTranslation"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.MenuItemFlags"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.MENUITEMINFO"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.MenuItemState"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.MenuItemType"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.MenuMembersMask"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.SafeDCHandle"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.SafeHookHandle"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.GetAncestorFlags"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.SetWindowLongFlags"/> nested enum.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.SetWindowPosFlags"/> nested enum.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.User32.WindowLongIndexFlags"/> nested enum.
            </content>
            <content>Contains the <see cref="T:PInvoke.User32.WindowsHookType" /> nested type.</content>
            <content>
            Contains the <see cref="T:PInvoke.User32.WindowShowStyle"/> nested enum.
            </content>
            <summary>
            Exported functions from the User32.dll Windows library.
            </summary>
            <content>
            Methods and nested types that are not strictly P/Invokes but provide
            a slightly higher level of functionality to ease calling into native code.
            </content>
            <summary>
            Exported functions from the User32.dll Windows library.
            </summary>
            <content>
            Methods and nested types that are not strictly P/Invokes but provide
            a slightly higher level of functionality to ease calling into native code.
            </content>
        </member>
        <member name="T:PInvoke.User32.MessageBeepType">
            <summary>
            Types of sounds that can be emitted by the <see cref="M:PInvoke.User32.MessageBeep(PInvoke.User32.MessageBeepType)"/> method.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.SimpleBeep">
            <summary>
            A simple beep. If the sound card is not available, the sound is generated using the speaker.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONASTERISK">
            <summary>
            See <see cref="F:PInvoke.User32.MessageBeepType.MB_ICONINFORMATION"/>.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONEXCLAMATION">
            <summary>
            See <see cref="F:PInvoke.User32.MessageBeepType.MB_ICONWARNING"/>.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONERROR">
            <summary>
            The sound specified as the Windows Critical Stop sound.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONHAND">
            <summary>
            See <see cref="F:PInvoke.User32.MessageBeepType.MB_ICONERROR"/>.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONINFORMATION">
            <summary>
            The sound specified as the Windows Asterisk sound.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONQUESTION">
            <summary>
            The sound specified as the Windows Question sound.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONSTOP">
            <summary>
            See <see cref="F:PInvoke.User32.MessageBeepType.MB_ICONERROR"/>.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_ICONWARNING">
            <summary>
            The sound specified as the Windows Exclamation sound.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MessageBeepType.MB_OK">
            <summary>
            The sound specified as the Windows Default Beep sound.
            </summary>
        </member>
        <member name="T:PInvoke.User32.FlashWindowFlags">
            <summary>The flash status stored in <see cref="T:PInvoke.User32.FLASHWINFO" /> and used in <see cref="M:PInvoke.User32.FlashWindowEx(PInvoke.User32.FLASHWINFO@)" />.</summary>
        </member>
        <member name="F:PInvoke.User32.FlashWindowFlags.FLASHW_ALL">
            <summary>
                Flash both the window caption and taskbar button. This is equivalent to setting the FLASHW_CAPTION |
                FLASHW_TRAY flags.
            </summary>
        </member>
        <member name="F:PInvoke.User32.FlashWindowFlags.FLASHW_CAPTION">
            <summary>Flash the window caption.</summary>
        </member>
        <member name="F:PInvoke.User32.FlashWindowFlags.FLASHW_STOP">
            <summary>Stop flashing. The system restores the window to its original state.</summary>
        </member>
        <member name="F:PInvoke.User32.FlashWindowFlags.FLASHW_TIMER">
            <summary>Flash continuously, until the <see cref="F:PInvoke.User32.FlashWindowFlags.FLASHW_STOP" /> flag is set.</summary>
        </member>
        <member name="F:PInvoke.User32.FlashWindowFlags.FLASHW_TIMERNOFG">
            <summary>Flash continuously until the window comes to the foreground.</summary>
        </member>
        <member name="F:PInvoke.User32.FlashWindowFlags.FLASHW_TRAY">
            <summary>Flash the taskbar button.</summary>
        </member>
        <member name="T:PInvoke.User32.FLASHWINFO">
            <summary>
                Contains the flash status for a window and the number of times the system should flash the window. Used in
                <see cref="M:PInvoke.User32.FlashWindowEx(PInvoke.User32.FLASHWINFO@)" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.FLASHWINFO.cbSize">
            <summary>The size of the structure, in bytes.</summary>
        </member>
        <member name="F:PInvoke.User32.FLASHWINFO.hwnd">
            <summary>A handle to the window to be flashed. The window can be either opened or minimized.</summary>
        </member>
        <member name="F:PInvoke.User32.FLASHWINFO.dwFlags">
            <summary>The flash status</summary>
        </member>
        <member name="F:PInvoke.User32.FLASHWINFO.uCount">
            <summary>The number of times to flash the window.</summary>
        </member>
        <member name="F:PInvoke.User32.FLASHWINFO.dwTimeout">
            <summary>
                The rate at which the window is to be flashed, in milliseconds. If <see cref="F:PInvoke.User32.FLASHWINFO.dwTimeout"/> is zero, the
                function uses the default cursor blink rate.
            </summary>
        </member>
        <member name="M:PInvoke.User32.FLASHWINFO.Create">
            <summary>
            Create a new instance of <see cref="T:PInvoke.User32.FLASHWINFO"/> with <see cref="F:PInvoke.User32.FLASHWINFO.cbSize"/> set to the correct value.
            </summary>
            <returns>A new instance of <see cref="T:PInvoke.User32.FLASHWINFO"/> with <see cref="F:PInvoke.User32.FLASHWINFO.cbSize"/> set to the correct value.</returns>
        </member>
        <member name="T:PInvoke.User32.LookupIconIdFromDirectoryExFlags">
            <summary>
            Flags for the <see cref="M:PInvoke.User32.LookupIconIdFromDirectoryEx(System.Byte*,System.Boolean,System.Int32,System.Int32,PInvoke.User32.LookupIconIdFromDirectoryExFlags)"/> method.
            </summary>
        </member>
        <member name="F:PInvoke.User32.LookupIconIdFromDirectoryExFlags.LR_DEFAULTCOLOR">
            <summary>
            Uses the default color format.
            </summary>
        </member>
        <member name="F:PInvoke.User32.LookupIconIdFromDirectoryExFlags.LR_MONOCHROME">
            <summary>
            Creates a monochrome icon or cursor.
            </summary>
        </member>
        <member name="T:PInvoke.User32.MapVirtualKeyTranslation">
            <summary>The translation to be performed in <see cref="M:PInvoke.User32.MapVirtualKey(System.Int32,PInvoke.User32.MapVirtualKeyTranslation)" />.</summary>
        </member>
        <member name="F:PInvoke.User32.MapVirtualKeyTranslation.MAPVK_VK_TO_CHAR">
            <summary>
                uCode is a virtual-key code and is translated into an unshifted character value in the low-order word of the
                return value. Dead keys (diacritics) are indicated by setting the top bit of the return value. If there is no
                translation, the function returns 0.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MapVirtualKeyTranslation.MAPVK_VK_TO_VSC">
            <summary>
                uCode is a virtual-key code and is translated into a scan code. If it is a virtual-key code that does not
                distinguish between left- and right-hand keys, the left-hand scan code is returned. If there is no translation, the
                function returns 0.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MapVirtualKeyTranslation.MAPVK_VSC_TO_VK">
            <summary>
                uCode is a scan code and is translated into a virtual-key code that does not distinguish between left- and
                right-hand keys. If there is no translation, the function returns 0.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MapVirtualKeyTranslation.MAPVK_VSC_TO_VK_EX">
            <summary>
                uCode is a scan code and is translated into a virtual-key code that distinguishes between left- and right-hand
                keys. If there is no translation, the function returns 0.
            </summary>
        </member>
        <member name="T:PInvoke.User32.MenuItemFlags">
            <summary>
            Controls the appearance and behavior of a menu item
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_BITMAP">
            <summary>Uses a bitmap as the menu item. The lpNewItem parameter contains a handle to the bitmap.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_CHECKED">
            <summary>
                Places a check mark next to the menu item. If the application provides check-mark bitmaps (see
                SetMenuItemBitmaps) this flag displays the check-mark bitmap next to the menu item.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_DISABLED">
            <summary>Disables the menu item so that it cannot be selected, but the flag does not gray it.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_ENABLED">
            <summary>Enables the menu item so that it can be selected, and restores it from its grayed state.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_GRAYED">
            <summary>Disables the menu item and grays it so that it cannot be selected.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_MENUBARBREAK">
            <summary>
                Functions the same as the MF_MENUBREAK flag for a menu bar. For a drop-down menu, submenu, or shortcut menu,
                the new column is separated from the old column by a vertical line.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_MENUBREAK">
            <summary>
                Places the item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or shortcut
                menu) without separating columns.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_OWNERDRAW">
            <summary>
                Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window
                that owns the menu receives a WM_MEASUREITEM message to retrieve the width and height of the menu item. The
                WM_DRAWITEM message is then sent to the window procedure of the owner window whenever the appearance of the menu
                item must be updated.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_POPUP">
            <summary>
                Specifies that the menu item opens a drop-down menu or submenu. The uIDNewItem parameter specifies a handle to
                the drop-down menu or submenu. This flag is used to add a menu name to a menu bar, or a menu item that opens a
                submenu to a drop-down menu, submenu, or shortcut menu.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_SEPARATOR">
            <summary>
                Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The
                line cannot be grayed, disabled, or highlighted. The lpNewItem and uIDNewItem parameters are ignored.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_STRING">
            <summary>Specifies that the menu item is a text string; the lpNewItem parameter is a pointer to the string.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemFlags.MF_UNCHECKED">
            <summary>
                Does not place a check mark next to the item (default). If the application supplies check-mark bitmaps (see
                SetMenuItemBitmaps), this flag displays the clear bitmap next to the menu item.
            </summary>
        </member>
        <member name="T:PInvoke.User32.MENUITEMINFO">
            <summary>
            Contains information about a menu item.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.cbSize">
            <summary>The size of the structure, in bytes.</summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.fMask">
            <summary>Indicates the members to be retrieved or set.</summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.fType">
            <summary>The menu item type.</summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.fState">
            <summary>The menu item state.</summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.wID">
            <summary>
                An application-defined value that identifies the menu item. Set <see cref="F:PInvoke.User32.MENUITEMINFO.fMask" /> to
                <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_ID" /> to use <see cref="F:PInvoke.User32.MENUITEMINFO.wID" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.hSubMenu">
            <summary>
                A handle to the drop-down menu or submenu associated with the menu item. If the menu item is not an item that
                opens a drop-down menu or submenu, this member is <see cref="F:System.IntPtr.Zero" />. Set <see cref="F:PInvoke.User32.MENUITEMINFO.fMask" /> to
                <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_SUBMENU" /> to use hSubMenu.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.hbmpChecked">
            <summary>
                A handle to the bitmap to display next to the item if it is selected. If this member is
                <see cref="F:System.IntPtr.Zero" />, a default bitmap is used. If the <see cref="F:PInvoke.User32.MenuItemType.MFT_RADIOCHECK" /> type value
                is specified, the default bitmap is a bullet. Otherwise, it is a check mark. Set fMask to
                <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_CHECKMARKS" /> to use <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpChecked" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.hbmpUnchecked">
            <summary>
                A handle to the bitmap to display next to the item if it is not selected. If this member is
                <see cref="F:System.IntPtr.Zero" />, no bitmap is used. Set <see cref="F:PInvoke.User32.MENUITEMINFO.fMask" /> to
                <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_CHECKMARKS" /> to use <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpUnchecked" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.dwItemData">
            <summary>
                An application-defined value associated with the menu item. Set <see cref="F:PInvoke.User32.MENUITEMINFO.fMask" /> to
                <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_DATA" /> to use <see cref="F:PInvoke.User32.MENUITEMINFO.dwItemData" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.dwTypeData">
            <summary>
                The contents of the menu item. The meaning of this member depends on the value of fType and is used only if the
                MIIM_TYPE flag is set in the fMask member.
                <para>
                    To retrieve a menu item of type <see cref="F:PInvoke.User32.MenuItemType.MFT_STRING" />, first find the size of the string by
                    setting the <see cref="F:PInvoke.User32.MENUITEMINFO.dwTypeData" />
                    member of <see cref="T:PInvoke.User32.MENUITEMINFO" /> to <see cref="F:System.IntPtr.Zero" /> and then calling
                    <see cref="M:PInvoke.User32.GetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" />. The value of <see cref="F:PInvoke.User32.MENUITEMINFO.cch" />+1 is the size needed. Then allocate a buffer of
                    this size, place the pointer to the buffer in dwTypeData, increment cch, and call
                    <see cref="M:PInvoke.User32.GetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" /> once again to fill the buffer with the string. If the retrieved menu item is of
                    some other type, then <see cref="M:PInvoke.User32.GetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" /> sets the <see cref="F:PInvoke.User32.MENUITEMINFO.dwTypeData" /> member to a value whose
                    type is specified by the <see cref="F:PInvoke.User32.MENUITEMINFO.fType" /> member.
                </para>
                <para>
                    When using with the <see cref="M:PInvoke.User32.SetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" /> function, this member should contain a value whose type is
                    specified by the <see cref="F:PInvoke.User32.MENUITEMINFO.fType" /> member.
                </para>
                <para>
                    dwTypeData is used only if the <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_STRING" /> flag is set in the
                    <see cref="F:PInvoke.User32.MENUITEMINFO.fMask" /> member
                </para>
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.cch">
            <summary>
                The length of the menu item text, in characters, when information is received about a menu item of the
                <see cref="F:PInvoke.User32.MenuItemType.MFT_STRING" />
                type. However, <see cref="F:PInvoke.User32.MENUITEMINFO.cch" /> is used only if the <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_TYPE" /> flag is set in the
                <see cref="F:PInvoke.User32.MENUITEMINFO.fMask" /> member and is zero otherwise. Also, <see cref="F:PInvoke.User32.MENUITEMINFO.cch" />
                is ignored when the content of a menu item is set by calling <see cref="M:PInvoke.User32.SetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" />.
                <para>
                    Note that, before calling <see cref="M:PInvoke.User32.GetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" />, the application must set <see cref="F:PInvoke.User32.MENUITEMINFO.cch" /> to the
                    length of the buffer pointed to by the <see cref="F:PInvoke.User32.MENUITEMINFO.dwTypeData" /> member. If the retrieved menu item is of type
                    <see cref="F:PInvoke.User32.MenuItemType.MFT_STRING" /> (as indicated by the <see cref="F:PInvoke.User32.MENUITEMINFO.fType" />
                    member), then <see cref="M:PInvoke.User32.GetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" /> changes <see cref="F:PInvoke.User32.MENUITEMINFO.cch" /> to the length of the menu item text. If
                    the retrieved menu item is of some other type, <see cref="M:PInvoke.User32.GetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)" /> sets the <see cref="F:PInvoke.User32.MENUITEMINFO.cch" /> field
                    to zero.
                </para>
                <para>
                    The <see cref="F:PInvoke.User32.MENUITEMINFO.cch" /> member is used when the <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_STRING" /> flag is set in the
                    <see cref="F:PInvoke.User32.MENUITEMINFO.fMask" /> member.
                </para>
            </summary>
        </member>
        <member name="F:PInvoke.User32.MENUITEMINFO.hbmpItem">
            <summary>
                A handle to the bitmap to be displayed, or it can be one of the following values :
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_CALLBACK" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_MBAR_CLOSE" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_MBAR_CLOSE_D" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_MBAR_MINIMIZE" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_MBAR_MINIMIZE_D" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_MBAR_RESTORE" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_POPUP_CLOSE" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_POPUP_MAXIMIZE" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_POPUP_MINIMIZE" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_POPUP_RESTORE" />
                </para>
                <para>
                    <see cref="F:PInvoke.User32.HBMMENU_SYSTEM" />
                </para>
            </summary>
        </member>
        <member name="M:PInvoke.User32.MENUITEMINFO.Create">
            <summary>
            Create a new instance of <see cref="T:PInvoke.User32.MENUITEMINFO"/> with <see cref="F:PInvoke.User32.MENUITEMINFO.cbSize"/> set to the correct value.
            </summary>
            <returns>A new instance of <see cref="T:PInvoke.User32.MENUITEMINFO"/> with <see cref="F:PInvoke.User32.MENUITEMINFO.cbSize"/> set to the correct value.</returns>
        </member>
        <member name="T:PInvoke.User32.MenuItemState">
            <summary>The menu item state in <see cref="T:PInvoke.User32.MENUITEMINFO" />.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_CHECKED">
            <summary>
                Checks the menu item. For more information about selected menu items, see the
                <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpChecked" /> member.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_DEFAULT">
            <summary>
                Specifies that the menu item is the default. A menu can contain only one default menu item, which is displayed
                in bold.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_DISABLED">
            <summary>
                Disables the menu item and grays it so that it cannot be selected. This is equivalent to
                <see cref="F:PInvoke.User32.MenuItemState.MFS_GRAYED" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_ENABLED">
            <summary>Enables the menu item so that it can be selected. This is the default state.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_GRAYED">
            <summary>
                Disables the menu item and grays it so that it cannot be selected. This is equivalent to
                <see cref="F:PInvoke.User32.MenuItemState.MFS_DISABLED" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_HILITE">
            <summary>Highlights the menu item.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_UNCHECKED">
            <summary>Unchecks the menu item. For more information about clear menu items, see the hbmpChecked member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemState.MFS_UNHILITE">
            <summary>Removes the highlight from the menu item. This is the default state.</summary>
        </member>
        <member name="T:PInvoke.User32.MenuItemType">
            <summary>
            The menu item type in <see cref="T:PInvoke.User32.MENUITEMINFO"/>.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_BITMAP">
            <summary>
                Displays the menu item using a bitmap. The low-order word of the <see cref="F:PInvoke.User32.MENUITEMINFO.dwTypeData" /> member is
                the bitmap handle, and the <see cref="F:PInvoke.User32.MENUITEMINFO.cch" /> member is ignored.
                <para>
                    <see cref="F:PInvoke.User32.MenuItemType.MFT_BITMAP" /> is replaced by <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_BITMAP" /> and
                    <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpItem" />.
                </para>
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_MENUBARBREAK">
            <summary>
                Places the menu item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or
                shortcut menu). For a drop-down menu, submenu, or shortcut menu, a vertical line separates the new column from the
                old.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_MENUBREAK">
            <summary>
                Places the menu item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or
                shortcut menu). For a drop-down menu, submenu, or shortcut menu, the columns are not separated by a vertical line.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_OWNERDRAW">
            <summary>
                Assigns responsibility for drawing the menu item to the window that owns the menu. The window receives a
                WM_MEASUREITEM message before the menu is displayed for the first time, and a WM_DRAWITEM message whenever the
                appearance of the menu item must be updated. If this value is specified, the dwTypeData member contains an
                application-defined value.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_RADIOCHECK">
            <summary>
                Displays selected menu items using a radio-button mark instead of a check mark if the
                <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpChecked" /> member is <see cref="F:System.IntPtr.Zero" />.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_RIGHTJUSTIFY">
            <summary>
                Right-justifies the menu item and any subsequent items. This value is valid only if the menu item is in a menu
                bar.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_RIGHTORDER">
            <summary>
                Specifies that menus cascade right-to-left (the default is left-to-right). This is used to support
                right-to-left languages, such as Arabic and Hebrew.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_SEPARATOR">
            <summary>
                Specifies that the menu item is a separator. A menu item separator appears as a horizontal dividing line. The
                dwTypeData and cch members are ignored. This value is valid only in a drop-down menu, submenu, or shortcut menu.
            </summary>
        </member>
        <member name="F:PInvoke.User32.MenuItemType.MFT_STRING">
            <summary>
                Displays the menu item using a text string. The <see cref="F:PInvoke.User32.MENUITEMINFO.dwTypeData" /> member is the pointer
                to a null-terminated string, and the <see cref="F:PInvoke.User32.MENUITEMINFO.cch" /> member is the length of the string.
                <para><see cref="F:PInvoke.User32.MenuItemType.MFT_STRING" /> is replaced by <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_STRING" />.</para>
            </summary>
        </member>
        <member name="T:PInvoke.User32.MenuMembersMask">
            <summary>Indicates the members to be retrieved or set in <see cref="T:PInvoke.User32.MENUITEMINFO" />.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_BITMAP">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpItem" /> member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_CHECKMARKS">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpChecked" /> and <see cref="F:PInvoke.User32.MENUITEMINFO.hbmpUnchecked" />
                members.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_DATA">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.dwItemData" /> member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_FTYPE">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.fType" /> member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_ID">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.wID" /> member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_STATE">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.fState" /> member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_STRING">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.dwTypeData" /> member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_SUBMENU">
            <summary>Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.hSubMenu" /> member.</summary>
        </member>
        <member name="F:PInvoke.User32.MenuMembersMask.MIIM_TYPE">
            <summary>
                Retrieves or sets the <see cref="F:PInvoke.User32.MENUITEMINFO.fType" /> and <see cref="F:PInvoke.User32.MENUITEMINFO.dwTypeData" /> members.
                <para>MIIM_TYPE is replaced by <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_BITMAP" />, <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_FTYPE" />, and
                    <see cref="F:PInvoke.User32.MenuMembersMask.MIIM_STRING" />.</para>
            </summary>
        </member>
        <member name="T:PInvoke.User32.SafeDCHandle">
            <summary>
            A SafeHandle to track DC handles.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SafeDCHandle.Null">
            <summary>
            A null handle.
            </summary>
        </member>
        <member name="M:PInvoke.User32.SafeDCHandle.#ctor(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PInvoke.User32.SafeDCHandle"/> class.
            </summary>
            <param name="hWnd">The HWND this handle is associated with and must be released with.</param>
            <param name="hDC">The handle to the DC.</param>
            <param name="ownsHandle">
                <see langword="true" /> to have the native handle released when this safe handle is disposed or finalized;
                <see langword="false" /> otherwise.
            </param>
        </member>
        <member name="P:PInvoke.User32.SafeDCHandle.HWnd">
            <summary>
            Gets the HWND this handle is associated with.
            </summary>
        </member>
        <member name="P:PInvoke.User32.SafeDCHandle.IsInvalid">
            <inheritdoc />
        </member>
        <member name="M:PInvoke.User32.SafeDCHandle.ReleaseHandle">
            <inheritdoc />
        </member>
        <member name="T:PInvoke.User32.SafeHookHandle">
            <summary>
            Represents a windows Hook that can be removed with <see cref="M:PInvoke.User32.UnhookWindowsHookEx(System.IntPtr)"/>.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SafeHookHandle.Null">
            <summary>
            A handle that may be used in place of <see cref="F:System.IntPtr.Zero"/>.
            </summary>
        </member>
        <member name="M:PInvoke.User32.SafeHookHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PInvoke.User32.SafeHookHandle"/> class.
            </summary>
        </member>
        <member name="M:PInvoke.User32.SafeHookHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PInvoke.User32.SafeHookHandle"/> class.
            </summary>
            <param name="preexistingHandle">An object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
                <see langword="true" /> to have the native handle released when this safe handle is disposed or finalized;
                <see langword="false" /> otherwise.
            </param>
        </member>
        <member name="P:PInvoke.User32.SafeHookHandle.IsInvalid">
            <inheritdoc />
        </member>
        <member name="M:PInvoke.User32.SafeHookHandle.ReleaseHandle">
            <inheritdoc />
        </member>
        <member name="T:PInvoke.User32.GetAncestorFlags">
            <summary>The ancestor to be retrieved by <see cref="M:PInvoke.User32.GetAncestor(System.IntPtr,PInvoke.User32.GetAncestorFlags)" />.</summary>
        </member>
        <member name="F:PInvoke.User32.GetAncestorFlags.GA_PARENT">
            <summary>Retrieves the parent window. This does not include the owner, as it does with the GetParent function.</summary>
        </member>
        <member name="F:PInvoke.User32.GetAncestorFlags.GA_ROOT">
            <summary>Retrieves the root window by walking the chain of parent windows.</summary>
        </member>
        <member name="F:PInvoke.User32.GetAncestorFlags.GA_ROOTOWNER">
            <summary>Retrieves the owned root window by walking the chain of parent and owner windows returned by GetParent.</summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_ASYNCWINDOWPOS">
            <summary>
                If the calling thread and the thread that owns the window are attached to different input queues, the system posts the request to the thread that owns the window. This prevents the calling thread from blocking its execution while other threads process the request.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_DEFERERASE">
            <summary>
                Prevents generation of the WM_SYNCPAINT message.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_DRAWFRAME">
            <summary>
                Draws a frame (defined in the window's class description) around the window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_FRAMECHANGED">
            <summary>
                Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE is sent only when the window's size is being changed.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_HIDEWINDOW">
            <summary>
                Hides the window.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOACTIVATE">
            <summary>
                Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOCOPYBITS">
            <summary>
                Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOMOVE">
            <summary>
                Retains the current position (ignores X and Y parameters).
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOOWNERZORDER">
            <summary>
                Does not change the owner window's position in the Z order.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOREDRAW">
            <summary>
                Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOREPOSITION">
            <summary>
                Same as the SWP_NOOWNERZORDER flag.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOSENDCHANGING">
            <summary>
                Prevents the window from receiving the WM_WINDOWPOSCHANGING message.
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOSIZE">
            <summary>
                Retains the current size (ignores the cx and cy parameters).
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_NOZORDER">
            <summary>
                Retains the current Z order (ignores the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:PInvoke.User32.SetWindowPosFlags.SWP_SHOWWINDOW">
            <summary>
                Displays the window.
            </summary>
        </member>
        <member name="T:PInvoke.User32.WindowsHookType">
            <summary>The type of hook procedure to be installed by <see cref="M:PInvoke.User32.SetWindowsHookEx(PInvoke.User32.WindowsHookType,System.IntPtr,System.IntPtr,System.Int32)" />.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_MSGFILTER">
            <summary>
                Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box,
                message box, menu, or scroll bar.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_JOURNALRECORD">
            <summary>
                Installs a hook procedure that records input messages posted to the system message queue. This hook is useful
                for recording macros.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_JOURNALPLAYBACK">
            <summary>Installs a hook procedure that posts messages previously recorded by a WH_JOURNALRECORD hook procedure.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_KEYBOARD">
            <summary>Installs a hook procedure that monitors keystroke messages.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_GETMESSAGE">
            <summary>Installs a hook procedure that monitors messages posted to a message queue.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_CALLWNDPROC">
            <summary>
                Installs a hook procedure that monitors messages before the system sends them to the destination window
                procedure.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_CBT">
            <summary>Installs a hook procedure that receives notifications useful to a CBT application.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_SYSMSGFILTER">
            <summary>
                nstalls a hook procedure that monitors messages generated as a result of an input event in a dialog box,
                message box, menu, or scroll bar. The hook procedure monitors these messages for all applications in the same
                desktop as the calling thread.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_MOUSE">
            <summary>Installs a hook procedure that monitors mouse messages.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_DEBUG">
            <summary>Installs a hook procedure useful for debugging other hook procedures.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_SHELL">
            <summary>Installs a hook procedure that receives notifications useful to shell applications.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_FOREGROUNDIDLE">
            <summary>
                Installs a hook procedure that will be called when the application's foreground thread is about to become
                idle. This hook is useful for performing low priority tasks during idle time.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_CALLWNDPROCRET">
            <summary>
                Installs a hook procedure that monitors messages after they have been processed by the destination window
                procedure.
            </summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_KEYBOARD_LL">
            <summary>Installs a hook procedure that monitors low-level keyboard input events.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowsHookType.WH_MOUSE_LL">
            <summary>Installs a hook procedure that monitors low-level mouse input events.</summary>
        </member>
        <member name="T:PInvoke.User32.WindowShowStyle">
            <summary>Enumeration of the different ways of showing a window using
            ShowWindow</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_HIDE">
            <summary>Hides the window and activates another window.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOWNORMAL">
            <summary>Activates and displays a window. If the window is minimized
            or maximized, the system restores it to its original size and
            position. An application should specify this flag when displaying
            the window for the first time.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOWMINIMIZED">
            <summary>Activates the window and displays it as a minimized window.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOWMAXIMIZED">
            <summary>Activates the window and displays it as a maximized window.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_MAXIMIZE">
            <summary>Maximizes the specified window.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOWNOACTIVATE">
            <summary>Displays a window in its most recent size and position.
            This value is similar to "ShowNormal", except the window is not
            actived.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOW">
            <summary>Activates the window and displays it in its current size
            and position.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_MINIMIZE">
            <summary>Minimizes the specified window and activates the next
            top-level window in the Z order.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOWMINNOACTIVE">
            <summary>Displays the window as a minimized window. This value is
            similar to "ShowMinimized", except the window is not activated.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOWNA">
            <summary>Displays the window in its current size and position. This
            value is similar to "Show", except the window is not activated.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_RESTORE">
            <summary>Activates and displays the window. If the window is
            minimized or maximized, the system restores it to its original size
            and position. An application should specify this flag when restoring
            a minimized window.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_SHOWDEFAULT">
            <summary>Sets the show state based on the SW_ value specified in the
            STARTUPINFO structure passed to the CreateProcess function by the
            program that started the application.</summary>
        </member>
        <member name="F:PInvoke.User32.WindowShowStyle.SW_FORCEMINIMIZE">
            <summary>Windows 2000/XP: Minimizes a window, even if the thread
            that owns the window is hung. This flag should only be used when
            minimizing windows from a different thread.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_CALLBACK">
            <summary>
                A bitmap that is drawn by the window that owns the menu. The application must process the WM_MEASUREITEM and
                WM_DRAWITEM messages.
            </summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_MBAR_CLOSE">
            <summary>Close button for the menu bar.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_MBAR_CLOSE_D">
            <summary>Disabled close button for the menu bar.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_MBAR_MINIMIZE">
            <summary>Minimize button for the menu bar.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_MBAR_MINIMIZE_D">
            <summary>Disabled minimize button for the menu bar.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_MBAR_RESTORE">
            <summary>Restore button for the menu bar.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_POPUP_CLOSE">
            <summary>Close button for the submenu.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_POPUP_MAXIMIZE">
            <summary>Maximize button for the submenu.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_POPUP_MINIMIZE">
            <summary>Minimize button for the submenu.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_POPUP_RESTORE">
            <summary>Restore button for the submenu.</summary>
        </member>
        <member name="F:PInvoke.User32.HBMMENU_SYSTEM">
            <summary>Windows icon or the icon of the window specified in <see cref="F:PInvoke.User32.MENUITEMINFO.dwItemData" />.</summary>
        </member>
        <member name="M:PInvoke.User32.MessageBeep(PInvoke.User32.MessageBeepType)">
            <summary>
            Plays a waveform sound. The waveform sound for each sound type is identified by an entry in the registry.
            </summary>
            <param name="uType">The sound to be played. The sounds are set by the user through the Sound control panel application, and then stored in the registry.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            The ReleaseDC function releases a device context (DC), freeing it for use by other applications. The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs.
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be released.</param>
            <param name="hDC">A handle to the DC to be released.</param>
            <returns>
            The return value indicates whether the DC was released. If the DC was released, the return value is 1.
            If the DC was not released, the return value is zero.
            </returns>
        </member>
        <member name="M:PInvoke.User32.SetForegroundWindow(System.IntPtr)">
            <summary>
                Brings the thread that created the specified window into the foreground and activates the window. Keyboard
                input is directed to the window, and various visual cues are changed for the user. The system assigns a slightly
                higher priority to the thread that created the foreground window than it does to other threads.
            </summary>
            <param name="hWnd">A handle to the window that should be activated and brought to the foreground.</param>
            <returns>
                If the window was brought to the foreground, the return value is true.
                <para>If the window was not brought to the foreground, the return value is false.</para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetAncestor(System.IntPtr,PInvoke.User32.GetAncestorFlags)">
            <summary>Retrieves the handle to the ancestor of the specified window.</summary>
            <param name="hWnd">
                A handle to the window whose ancestor is to be retrieved. If this parameter is the desktop window,
                the function returns <see cref="F:System.IntPtr.Zero" />.
            </param>
            <param name="gaFlags">The ancestor to be retrieved.</param>
            <returns>The handle to the ancestor window.</returns>
        </member>
        <member name="M:PInvoke.User32.SetWindowsHookEx(PInvoke.User32.WindowsHookType,PInvoke.User32.WindowsHookDelegate,System.IntPtr,System.Int32)">
            <summary>
                Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to
                monitor the system for certain types of events. These events are associated either with a specific thread or with
                all threads in the same desktop as the calling thread.
            </summary>
            <param name="idHook">The type of hook procedure to be installed.</param>
            <param name="lpfn">
                A pointer to the hook procedure. If the <paramref name="dwThreadId" /> parameter is zero or
                specifies the identifier of a thread created by a different process, the <paramref name="lpfn" /> parameter must
                point to a hook procedure in a DLL. Otherwise, <paramref name="lpfn" /> can point to a hook procedure in the code
                associated with the current process.
            </param>
            <param name="hMod">
                A handle to the DLL containing the hook procedure pointed to by the <paramref name="lpfn" />
                parameter. The <paramref name="hMod" /> parameter must be set to <see cref="F:System.IntPtr.Zero" /> if the
                <paramref name="dwThreadId" /> parameter specifies a thread created by the current process and if the hook
                procedure is within the code associated with the current process.
            </param>
            <param name="dwThreadId">
                The identifier of the thread with which the hook procedure is to be associated. For desktop
                apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same
                desktop as the calling thread. For Windows Store apps, see the Remarks section.
            </param>
            <returns>
                If the function succeeds, the return value is the handle to the hook procedure.
                <para>
                    If the function fails, the return value is an invalid handle. To get extended error information,
                    call GetLastError.
                </para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.SetWindowsHookEx(PInvoke.User32.WindowsHookType,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
                Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to
                monitor the system for certain types of events. These events are associated either with a specific thread or with
                all threads in the same desktop as the calling thread.
            </summary>
            <param name="idHook">The type of hook procedure to be installed.</param>
            <param name="lpfn">
                A pointer to the hook procedure. If the <paramref name="dwThreadId" /> parameter is zero or
                specifies the identifier of a thread created by a different process, the <paramref name="lpfn" /> parameter must
                point to a hook procedure in a DLL. Otherwise, <paramref name="lpfn" /> can point to a hook procedure in the code
                associated with the current process.
            </param>
            <param name="hMod">
                A handle to the DLL containing the hook procedure pointed to by the <paramref name="lpfn" />
                parameter. The <paramref name="hMod" /> parameter must be set to <see cref="F:System.IntPtr.Zero" /> if the
                <paramref name="dwThreadId" /> parameter specifies a thread created by the current process and if the hook
                procedure is within the code associated with the current process.
            </param>
            <param name="dwThreadId">
                The identifier of the thread with which the hook procedure is to be associated. For desktop
                apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same
                desktop as the calling thread. For Windows Store apps, see the Remarks section.
            </param>
            <returns>
                If the function succeeds, the return value is the handle to the hook procedure.
                <para>
                    If the function fails, the return value is an invalid handle. To get extended error information,
                    call GetLastError.
                </para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
                Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call
                this function either before or after processing the hook information.
            </summary>
            <param name="hhk">This parameter is ignored.</param>
            <param name="nCode">
                The hook code passed to the current hook procedure. The next hook procedure uses this code to
                determine how to process the hook information.
            </param>
            <param name="wParam">
                The wParam value passed to the current hook procedure. The meaning of this parameter depends on
                the type of hook associated with the current hook chain.
            </param>
            <param name="lParam">
                The lParam value passed to the current hook procedure. The meaning of this parameter depends on
                the type of hook associated with the current hook chain.
            </param>
            <returns>
                This value is returned by the next hook procedure in the chain. The current hook procedure must also return
                this value. The meaning of the return value depends on the hook type. For more information, see the descriptions of
                the individual hook procedures.
            </returns>
        </member>
        <member name="M:PInvoke.User32.SetCapture(System.IntPtr)">
            <summary>
                Sets the mouse capture to the specified window belonging to the current thread.SetCapture captures mouse input
                either when the mouse is over the capturing window, or when the mouse button was pressed while the mouse was over
                the capturing window and the button is still down. Only one window at a time can capture the mouse.
                <para>
                    If the mouse cursor is over a window created by another thread, the system will direct mouse input to the
                    specified window only if a mouse button is down.
                </para>
            </summary>
            <param name="hWnd">A handle to the window in the current thread that is to capture the mouse.</param>
            <returns>
                The return value is a handle to the window that had previously captured the mouse. If there is no such window,
                the return value is <see cref="F:System.IntPtr.Zero" />.
            </returns>
        </member>
        <member name="M:PInvoke.User32.ReleaseCapture">
            <summary>
                Releases the mouse capture from a window in the current thread and restores normal mouse input processing. A
                window that has captured the mouse receives all mouse input, regardless of the position of the cursor, except when
                a mouse button is clicked while the cursor hot spot is in the window of another thread.
            </summary>
            <returns>
                If the function succeeds, the return value is true.
                <para>If the function fails, the return value is false. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.FlashWindowEx(PInvoke.User32.FLASHWINFO@)">
            <summary>Flashes the specified window. It does not change the active state of the window.</summary>
            <param name="pwfi">A pointer to a <see cref="T:PInvoke.User32.FLASHWINFO" /> structure.</param>
            <returns>
                The return value specifies the window's state before the call to the FlashWindowEx function. If the window
                caption was drawn as active before the call, the return value is nonzero. Otherwise, the return value is zero.
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetSystemMenu(System.IntPtr,System.Boolean)">
            <summary>
                Enables the application to access the window menu (also known as the system menu or the control menu) for
                copying and modifying.
            </summary>
            <param name="hWnd">A handle to the window that will own a copy of the window menu.</param>
            <param name="bRevert">
                The action to be taken. If this parameter is FALSE, GetSystemMenu returns a handle to the copy of
                the window menu currently in use. The copy is initially identical to the window menu, but it can be modified. If
                this parameter is TRUE, GetSystemMenu resets the window menu back to the default state. The previous window menu,
                if any, is destroyed.
            </param>
            <returns>
                If the bRevert parameter is FALSE, the return value is a handle to a copy of the window menu. If the bRevert
                parameter is TRUE, the return value is NULL.
            </returns>
        </member>
        <member name="M:PInvoke.User32.AppendMenu(System.IntPtr,PInvoke.User32.MenuItemFlags,System.IntPtr,System.String)">
            <summary>
                Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can
                use this function to specify the content, appearance, and behavior of the menu item.
            </summary>
            <param name="hMenu">A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed.</param>
            <param name="uFlags">Controls the appearance and behavior of the new menu item</param>
            <param name="uIdNewItem">
                The identifier of the new menu item or, if the uFlags parameter is set to
                <see cref="F:PInvoke.User32.MenuItemFlags.MF_POPUP" />, a handle to the drop-down menu or submenu.
            </param>
            <param name="lpNewItem">
                The content of the new menu item. The interpretation of lpNewItem depends on whether the uFlags parameter includes
                the following values.
                <para><see cref="F:PInvoke.User32.MenuItemFlags.MF_BITMAP" />: Contains a bitmap handle.</para>
                <para>
                    <see cref="F:PInvoke.User32.MenuItemFlags.MF_OWNERDRAW" />: Contains an application-supplied value that can be used to
                    maintain additional data related to the menu item. The value is in the itemData member of the structure pointed
                    to by the lParam parameter of the WM_MEASUREITEM or WM_DRAWITEM message sent when the menu is created or its
                    appearance is updated.
                </para>
                <para><see cref="F:PInvoke.User32.MenuItemFlags.MF_STRING" />: Contains a pointer to a null-terminated string.</para>
            </param>
            <returns>
                If the function succeeds, the return value is true.
                <para>If the function fails, the return value is false. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.SetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)">
            <summary>Changes information about a menu item.</summary>
            <param name="hMenu">A handle to the menu that contains the menu item.</param>
            <param name="uItem">
                The identifier or position of the menu item to change. The meaning of this parameter depends on the
                value of <paramref name="fByPosition" />.
            </param>
            <param name="fByPosition">
                The meaning of uItem. If this parameter is FALSE, uItem is a menu item identifier. Otherwise,
                it is a menu item position.
            </param>
            <param name="lpmii">
                A <see cref="T:PInvoke.User32.MENUITEMINFO" /> structure that contains information about the menu item and specifies
                which menu item attributes to change.
            </param>
            <returns>
                If the function succeeds, the return value is true.
                <para>If the function fails, the return value is false. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetMenuItemInfo(System.IntPtr,System.UInt32,System.Boolean,PInvoke.User32.MENUITEMINFO@)">
            <summary>Retrieves information about a menu item.</summary>
            <param name="hMenu">A handle to the menu that contains the menu item.</param>
            <param name="uItem">
                The identifier or position of the menu item to get information about. The meaning of this parameter
                depends on the value of <paramref name="fByPosition" />.
            </param>
            <param name="fByPosition">
                The meaning of <paramref name="uItem" />. If this parameter is FALSE,
                <paramref name="uItem" /> is a menu item identifier. Otherwise, it is a menu item position.
            </param>
            <param name="lpmii">
                A <see cref="T:PInvoke.User32.MENUITEMINFO" /> structure that specifies the information to retrieve and receives
                information about the menu item. Note that you must set the cbSize member to <code>sizeof(MENUITEMINFO)</code>
                before calling this function (Either manually or by using <see cref="M:PInvoke.User32.MENUITEMINFO.Create" />).
            </param>
            <returns>
                If the function succeeds, the return value is true.
                <para>If the function fails, the return value is false. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.MapVirtualKey(System.Int32,PInvoke.User32.MapVirtualKeyTranslation)">
            <summary>
                Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a
                virtual-key code.
                <para>
                    To specify a handle to the keyboard layout to use for translating the specified code, use the MapVirtualKeyEx
                    function.
                </para>
            </summary>
            <param name="uCode">
                The virtual key code or scan code for a key. How this value is interpreted depends on the value of
                the uMapType parameter.
            </param>
            <param name="uMapType">
                The translation to be performed. The value of this parameter depends on the value of the uCode
                parameter.
            </param>
            <returns>
                The return value is either a scan code, a virtual-key code, or a character value, depending on the value of
                <paramref name="uCode" /> and <paramref name="uMapType" />. If there is no translation, the return value is zero.
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetActiveWindow">
            <summary>Retrieves the window handle to the active window attached to the calling thread's message queue.</summary>
            <returns>
                The return value is the handle to the active window attached to the calling thread's message queue. Otherwise,
                the return value is <see cref="F:System.IntPtr.Zero" />.
            </returns>
        </member>
        <member name="M:PInvoke.User32.LookupIconIdFromDirectory(System.Byte*,System.Boolean)">
            <summary>
            Searches through icon or cursor data for the icon or cursor that best fits the current display device.
            To specify a desired height or width, use the LookupIconIdFromDirectoryEx function.
            </summary>
            <param name="presbits">
            The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <paramref name="presbits"/> is not pointing to valid resource data.
            </param>
            <param name="fIcon">
            Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.
            </param>
            <returns>
            If the function succeeds, the return value is an integer resource identifier for the icon or cursor that best fits the current display device.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.LookupIconIdFromDirectoryEx(System.Byte*,System.Boolean,System.Int32,System.Int32,PInvoke.User32.LookupIconIdFromDirectoryExFlags)">
            <summary>
            Searches through icon or cursor data for the icon or cursor that best fits the current display device.
            To specify a desired height or width, use the LookupIconIdFromDirectoryEx function.
            </summary>
            <param name="presbits">
            The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <paramref name="presbits"/> is not pointing to valid resource data.
            </param>
            <param name="fIcon">
            Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.
            </param>
            <param name="cxDesired">The desired width, in pixels, of the icon. If this parameter is zero, the function uses the SM_CXICON or SM_CXCURSOR system metric value.</param>
            <param name="cyDesired">The desired height, in pixels, of the icon. If this parameter is zero, the function uses the SM_CYICON or SM_CYCURSOR system metric value.</param>
            <param name="Flags">A combination of the following values.</param>
            <returns>
            If the function succeeds, the return value is an integer resource identifier for the icon or cursor that best fits the current display device.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetDC_IntPtr(System.IntPtr)">
            <summary>
            The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. The device context is an opaque data structure, whose values are used internally by GDI.
            The GetDCEx function is an extension to GetDC, which gives an application more control over how and whether clipping occurs in the client area.
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be retrieved. If this value is NULL, GetDC retrieves the DC for the entire screen.</param>
            <returns>
            If the function succeeds, the return value is a handle to the DC for the specified window's client area.
            If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:PInvoke.User32.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
                Removes a hook procedure installed in a hook chain by the
                <see cref="M:PInvoke.User32.SetWindowsHookEx(PInvoke.User32.WindowsHookType,System.IntPtr,System.IntPtr,System.Int32)" /> function.
            </summary>
            <param name="hhk">
                A handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to
                <see cref="M:PInvoke.User32.SetWindowsHookEx(PInvoke.User32.WindowsHookType,System.IntPtr,System.IntPtr,System.Int32)" />.
            </param>
            <returns>
                If the function succeeds, the return value is true.
                <para>If the function fails, the return value is false. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:PInvoke.User32.GetDC(System.IntPtr)">
            <summary>
            The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. The device context is an opaque data structure, whose values are used internally by GDI.
            The GetDCEx function is an extension to GetDC, which gives an application more control over how and whether clipping occurs in the client area.
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be retrieved. If this value is NULL, GetDC retrieves the DC for the entire screen.</param>
            <returns>
            If the function succeeds, the return value is a handle to the DC for the specified window's client area.
            If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:PInvoke.User32.LookupIconIdFromDirectory(System.IntPtr,System.Boolean)">
            <summary>
            Searches through icon or cursor data for the icon or cursor that best fits the current display device.
            To specify a desired height or width, use the LookupIconIdFromDirectoryEx function.
            </summary>
            <param name = "presbits">
            The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <paramref name = "presbits"/> is not pointing to valid resource data.
            </param>
            <param name = "fIcon">
            Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.
            </param>
            <returns>
            If the function succeeds, the return value is an integer resource identifier for the icon or cursor that best fits the current display device.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.LookupIconIdFromDirectory(System.Byte[],System.Boolean)">
            <summary>
            Searches through icon or cursor data for the icon or cursor that best fits the current display device.
            To specify a desired height or width, use the LookupIconIdFromDirectoryEx function.
            </summary>
            <param name = "presbits">
            The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <paramref name = "presbits"/> is not pointing to valid resource data.
            </param>
            <param name = "fIcon">
            Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.
            </param>
            <returns>
            If the function succeeds, the return value is an integer resource identifier for the icon or cursor that best fits the current display device.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.LookupIconIdFromDirectoryEx(System.IntPtr,System.Boolean,System.Int32,System.Int32,PInvoke.User32.LookupIconIdFromDirectoryExFlags)">
            <summary>
            Searches through icon or cursor data for the icon or cursor that best fits the current display device.
            To specify a desired height or width, use the LookupIconIdFromDirectoryEx function.
            </summary>
            <param name = "presbits">
            The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <paramref name = "presbits"/> is not pointing to valid resource data.
            </param>
            <param name = "fIcon">
            Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.
            </param>
            <param name = "cxDesired">The desired width, in pixels, of the icon. If this parameter is zero, the function uses the SM_CXICON or SM_CXCURSOR system metric value.</param>
            <param name = "cyDesired">The desired height, in pixels, of the icon. If this parameter is zero, the function uses the SM_CYICON or SM_CYCURSOR system metric value.</param>
            <param name = "Flags">A combination of the following values.</param>
            <returns>
            If the function succeeds, the return value is an integer resource identifier for the icon or cursor that best fits the current display device.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.User32.LookupIconIdFromDirectoryEx(System.Byte[],System.Boolean,System.Int32,System.Int32,PInvoke.User32.LookupIconIdFromDirectoryExFlags)">
            <summary>
            Searches through icon or cursor data for the icon or cursor that best fits the current display device.
            To specify a desired height or width, use the LookupIconIdFromDirectoryEx function.
            </summary>
            <param name = "presbits">
            The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <paramref name = "presbits"/> is not pointing to valid resource data.
            </param>
            <param name = "fIcon">
            Indicates whether an icon or a cursor is sought. If this parameter is TRUE, the function is searching for an icon; if the parameter is FALSE, the function is searching for a cursor.
            </param>
            <param name = "cxDesired">The desired width, in pixels, of the icon. If this parameter is zero, the function uses the SM_CXICON or SM_CXCURSOR system metric value.</param>
            <param name = "cyDesired">The desired height, in pixels, of the icon. If this parameter is zero, the function uses the SM_CYICON or SM_CYCURSOR system metric value.</param>
            <param name = "Flags">A combination of the following values.</param>
            <returns>
            If the function succeeds, the return value is an integer resource identifier for the icon or cursor that best fits the current display device.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
    </members>
</doc>
